
name: Deploy Widget to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Setup Node.js ⚙️
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies 📦
        run: npm ci

      - name: Extract Repository Name
        id: repo-name
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "Repository name: $REPO_NAME"

      - name: Debug Environment
        run: |
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Repository Name: ${{ env.REPO_NAME }}"
          echo "GitHub Pages URL will be: https://$(echo $GITHUB_REPOSITORY | cut -d'/' -f1).github.io/${{ env.REPO_NAME }}/"
          echo "BASE_URL will be: /${{ env.REPO_NAME }}/"

      - name: Build Widget 🔨
        run: npx vite build --config src/vite-widget-config.ts
        env:
          BASE_URL: /${{ env.REPO_NAME }}/
          NODE_ENV: production

      - name: Create Widget Manifest 📄
        run: |
          # Create a manifest file that lists all widget files
          echo "Widget files created at: $(date)" > dist/widget-manifest.json
          echo "{" >> dist/widget-manifest.json
          echo "  \"widgetFiles\": [" >> dist/widget-manifest.json
          find dist -type f -name "treatment-recommender*" -o -name "style.css" | sed 's/^/    "/;s/$/",/' | sed '$ s/,$//' >> dist/widget-manifest.json
          echo "  ]," >> dist/widget-manifest.json
          echo "  \"buildDate\": \"$(date)\"," >> dist/widget-manifest.json
          echo "  \"repository\": \"$GITHUB_REPOSITORY\"," >> dist/widget-manifest.json
          echo "  \"version\": \"1.0.0\"" >> dist/widget-manifest.json
          echo "}" >> dist/widget-manifest.json
          
          # Display the manifest for debugging
          cat dist/widget-manifest.json

      - name: Create Widget Aliases 🔗
        run: |
          # Create directory structure
          mkdir -p dist/widget
          
          # Find the generated widget file
          WIDGET_FILE=$(find dist -name "treatment-recommender*.js" | head -n 1)
          STYLE_FILE=$(find dist -name "style.css" | head -n 1)
          
          if [ -n "$WIDGET_FILE" ]; then
            echo "Widget JS file found at: $WIDGET_FILE"
            
            # Create aliases at strategic locations
            cp "$WIDGET_FILE" dist/treatment-recommender.js
            cp "$WIDGET_FILE" dist/treatment-recommender.umd.js
            cp "$WIDGET_FILE" dist/widget/treatment-recommender.js
            
            echo "Created widget JS aliases at:"
            echo "- dist/treatment-recommender.js"
            echo "- dist/treatment-recommender.umd.js"
            echo "- dist/widget/treatment-recommender.js"
          else
            echo "ERROR: Widget JS file not found!"
            find dist -type f -name "*.js" | sort
          fi
          
          if [ -n "$STYLE_FILE" ]; then
            echo "Widget CSS file found at: $STYLE_FILE"
            
            # Create aliases at strategic locations
            cp "$STYLE_FILE" dist/style.css
            cp "$STYLE_FILE" dist/widget/style.css
            
            echo "Created widget CSS aliases at:"
            echo "- dist/style.css"
            echo "- dist/widget/style.css"
          else
            echo "ERROR: Widget CSS file not found!"
            find dist -type f -name "*.css" | sort
          fi

      - name: Verify Widget Files Existence
        run: |
          echo "Checking for widget files..."
          for file in "treatment-recommender.js" "treatment-recommender.umd.js" "style.css"; do
            if [ -f "dist/$file" ]; then
              echo "✅ $file exists at root"
              ls -la "dist/$file"
            else
              echo "❌ $file NOT found at root"
            fi
          done
          
          echo "Checking widget directory..."
          for file in "treatment-recommender.js" "style.css"; do
            if [ -f "dist/widget/$file" ]; then
              echo "✅ widget/$file exists"
              ls -la "dist/widget/$file"
            else
              echo "❌ widget/$file NOT found"
            fi
          done
          
          echo "Looking for all JavaScript files:"
          find dist -name "*.js" -type f | sort

      - name: Build Main App 🏗️
        run: npm run build
        env:
          BASE_URL: /${{ env.REPO_NAME }}/

      - name: Copy HTML Files 📋
        run: |
          mkdir -p dist/widget-demo
          cp public/iframe-widget.html dist/
          cp public/iframe-integration-example.html dist/
          cp public/integration-example.html dist/
          cp public/index.html dist/
          cp public/widget-demo.html dist/ || echo "Widget demo file not found, skipping"
          cp public/widget-integration-guide.html dist/ || echo "Integration guide file not found, skipping"
          
          # Create a direct widget test page
          cat > dist/widget-test.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Widget Direct Test</title>
            <script src="https://unpkg.com/react@18/umd/react.production.min.js" crossorigin></script>
            <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" crossorigin></script>
            <script src="treatment-recommender.js"></script>
            <link rel="stylesheet" href="style.css">
          </head>
          <body>
            <div id="widget-container" style="height:800px;"></div>
            <script>
              document.addEventListener('DOMContentLoaded', function() {
                if (window.TreatmentRecommender) {
                  ReactDOM.createRoot(document.getElementById('widget-container')).render(
                    React.createElement(window.TreatmentRecommender.Widget)
                  );
                  console.log('Widget rendered directly');
                } else {
                  document.getElementById('widget-container').innerHTML = 
                    '<div style="color:red;padding:20px;">Error: TreatmentRecommender not found</div>';
                }
              });
            </script>
          </body>
          </html>
          EOF

      - name: Create 404.html 🔍
        run: |
          cp dist/index.html dist/404.html

      - name: Create Debug Info Files
        run: |
          # Create a file listing all assets
          echo "Asset listing for debugging ($(date)):" > dist/asset-list.txt
          find dist -type f | sort >> dist/asset-list.txt
          
          # Create config debug file
          echo "BASE_URL: /${{ env.REPO_NAME }}/" > dist/debug-info.txt
          echo "Build timestamp: $(date)" >> dist/debug-info.txt
          echo "Repository: $GITHUB_REPOSITORY" >> dist/debug-info.txt
          echo "Files in dist directory:" >> dist/debug-info.txt
          ls -la dist >> dist/debug-info.txt
          
          # Create widget path check page
          cat > dist/widget-path-check.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>Widget Path Check</title>
            <style>
              body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; padding: 20px; }
              .success { color: green; }
              .error { color: red; }
              pre { background: #f5f5f5; padding: 10px; overflow-x: auto; }
              #results { margin-top: 20px; }
            </style>
          </head>
          <body>
            <h1>Widget Resource Check</h1>
            <p>Testing all possible widget resource paths. This helps diagnose loading issues.</p>
            <button id="check-btn">Check All Paths</button>
            <div id="results"></div>
            
            <script>
              document.getElementById('check-btn').addEventListener('click', function() {
                const paths = [
                  "treatment-recommender.js",
                  "treatment-recommender.umd.js",
                  "widget/treatment-recommender.js",
                  "style.css",
                  "widget/style.css"
                ];
                
                const resultsList = document.getElementById('results');
                resultsList.innerHTML = '<h3>Checking paths...</h3>';
                
                // Also display base URL info
                const baseInfo = document.createElement('div');
                baseInfo.innerHTML = \`
                  <h3>Environment Info</h3>
                  <p>URL: \${window.location.href}</p>
                  <p>Origin: \${window.location.origin}</p>
                  <p>Pathname: \${window.location.pathname}</p>
                \`;
                resultsList.appendChild(baseInfo);
                
                // Results container
                const resultsContainer = document.createElement('div');
                resultsList.appendChild(resultsContainer);
                
                // Check each path
                Promise.all(paths.map(path => {
                  const fullPath = window.location.pathname.includes('/widget-path-check.html') 
                    ? window.location.pathname.replace('/widget-path-check.html', '/') + path
                    : '/' + path;
                    
                  return fetch(fullPath)
                    .then(response => {
                      const li = document.createElement('div');
                      if (response.ok) {
                        li.innerHTML = \`<p class="success">✅ \${fullPath} - FOUND (\${response.status})</p>\`;
                      } else {
                        li.innerHTML = \`<p class="error">❌ \${fullPath} - NOT FOUND (\${response.status})</p>\`;
                      }
                      resultsContainer.appendChild(li);
                      return { path: fullPath, status: response.status, ok: response.ok };
                    })
                    .catch(error => {
                      const li = document.createElement('div');
                      li.innerHTML = \`<p class="error">❌ \${fullPath} - ERROR: \${error.message}</p>\`;
                      resultsContainer.appendChild(li);
                      return { path: fullPath, error: error.message, ok: false };
                    });
                }))
                .then(results => {
                  // Add a summary
                  const summary = document.createElement('div');
                  const successCount = results.filter(r => r.ok).length;
                  summary.innerHTML = \`
                    <h3>Summary</h3>
                    <p>\${successCount} of \${paths.length} paths found successfully</p>
                    <pre>\${JSON.stringify(results, null, 2)}</pre>
                  \`;
                  resultsList.appendChild(summary);
                });
              });
            </script>
          </body>
          </html>
          EOF

      - name: Debug Build Output
        run: |
          echo "Contents of dist directory:"
          ls -la dist
          echo "Contents of dist/widget directory:"
          ls -la dist/widget || echo "No widget directory found"
          echo "Looking for JS and CSS files:"
          find dist -name "*.js" -o -name "*.css"

      - name: Deploy to GitHub Pages 🚀
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
          clean: true
