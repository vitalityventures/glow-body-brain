
name: Deploy Widget to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Setup Node.js ‚öôÔ∏è
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies üì¶
        run: npm ci

      - name: Extract Repository Name
        id: repo-name
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "Repository name: $REPO_NAME"

      - name: Debug Environment
        run: |
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Repository Name: ${{ env.REPO_NAME }}"
          echo "GitHub Pages URL will be: https://$(echo $GITHUB_REPOSITORY | cut -d'/' -f1).github.io/${{ env.REPO_NAME }}/"
          echo "BASE_URL will be: /${{ env.REPO_NAME }}/"

      - name: Build Widget üî®
        run: npx vite build --config src/vite-widget-config.ts
        env:
          BASE_URL: /${{ env.REPO_NAME }}/
          NODE_ENV: production

      # Check for the main widget files
      - name: Verify Widget Build üîç
        run: |
          echo "Checking for widget files..."
          ls -la dist
          if [ -f "dist/widget.umd.js" ]; then
            echo "‚úÖ Widget file built successfully"
          else
            echo "‚ùå Widget file NOT found!"
            find dist -name "*.js" | sort
            exit 1
          fi

      # Create predictable file paths that should work for all integration methods
      - name: Create Widget Aliases and Alternative Paths üîó
        run: |
          echo "Creating widget file aliases at multiple paths for maximum compatibility..."
          
          # Create dedicated widget directory
          mkdir -p dist/widget
          
          # Create ROOT level aliases (most important)
          cp dist/widget.umd.js dist/treatment-recommender.js
          cp dist/widget.umd.js dist/widget.js
          cp dist/widget-style.css dist/style.css
          
          # Create widget/ directory aliases
          cp dist/widget.umd.js dist/widget/treatment-recommender.js
          cp dist/widget.umd.js dist/widget/widget.js
          cp dist/widget-style.css dist/widget/style.css
          
          # Create assets/ directory aliases (for compatibility)
          mkdir -p dist/assets
          cp dist/widget.umd.js dist/assets/treatment-recommender.js
          cp dist/widget-style.css dist/assets/style.css
          
          # List all created files for verification
          echo "Files created:"
          find dist -type f -name "*.js" -o -name "*.css" | sort

      # Create detailed widget manifest for debugging
      - name: Create Widget Manifest üìë
        run: |
          echo "Creating widget manifest file..."
          echo "{" > dist/widget-manifest.json
          echo "  \"widgetFiles\": [" >> dist/widget-manifest.json
          find dist -type f -name "*.js" -o -name "*.css" | sed 's/^dist\//    "/;s/$/",/' | sed '$ s/,$//' >> dist/widget-manifest.json
          echo "  ]," >> dist/widget-manifest.json
          echo "  \"buildDate\": \"$(date)\"," >> dist/widget-manifest.json
          echo "  \"repository\": \"$GITHUB_REPOSITORY\"," >> dist/widget-manifest.json
          echo "  \"baseUrl\": \"/${{ env.REPO_NAME }}/\"," >> dist/widget-manifest.json
          echo "  \"version\": \"1.0.0\"" >> dist/widget-manifest.json
          echo "}" >> dist/widget-manifest.json
          
          cat dist/widget-manifest.json

      # Build the main application
      - name: Build Main App üèóÔ∏è
        run: npm run build
        env:
          BASE_URL: /${{ env.REPO_NAME }}/

      # Create simple test page that loads the widget directly
      - name: Create Widget Test Page üìÑ
        run: |
          cat > dist/test-widget.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Widget Direct Test</title>
            <link rel="stylesheet" href="style.css">
            <script src="https://unpkg.com/react@18/umd/react.production.min.js" crossorigin></script>
            <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" crossorigin></script>
            <script src="treatment-recommender.js"></script>
            <style>
              body { font-family: system-ui, sans-serif; padding: 20px; max-width: 800px; margin: 0 auto; }
              #widget-container { min-height: 600px; border: 1px solid #ccc; border-radius: 8px; overflow: hidden; }
              .success { color: green; }
              .error { color: red; }
            </style>
          </head>
          <body>
            <h1>Treatment Recommender Widget Test</h1>
            <p>This page tests if the widget loads correctly from its distributed files.</p>
            
            <div id="widget-container"></div>
            
            <div id="widget-status" style="margin-top: 20px;"></div>
            
            <script>
              document.addEventListener('DOMContentLoaded', function() {
                const status = document.getElementById('widget-status');
                
                if (window.TreatmentRecommender) {
                  status.innerHTML = '<p class="success">Widget loaded successfully! ‚úÖ</p>';
                  
                  // Add details about what was loaded
                  status.innerHTML += \`
                    <p>Version: \${window.TreatmentRecommender.version || 'unknown'}</p>
                    <p>Build date: \${window.TreatmentRecommender.buildDate || 'unknown'}</p>
                  \`;
                  
                  // Render the widget
                  try {
                    ReactDOM.createRoot(document.getElementById('widget-container')).render(
                      React.createElement(window.TreatmentRecommender.Widget)
                    );
                    status.innerHTML += '<p class="success">Widget rendered successfully!</p>';
                  } catch (error) {
                    status.innerHTML += \`<p class="error">Error rendering widget: \${error.message}</p>\`;
                  }
                } else {
                  status.innerHTML = \`
                    <p class="error">Error: TreatmentRecommender not found ‚ùå</p>
                    <p>Check the console for more details.</p>
                  \`;
                }
              });
            </script>
          </body>
          </html>
          EOF

      # Copy HTML files including iframe 
      - name: Copy HTML Files üìã
        run: |
          mkdir -p dist/demo
          cp -f public/iframe-widget.html dist/
          cp -f public/iframe-integration-example.html dist/
          cp -f public/integration-example.html dist/
          cp -f public/widget-demo.html dist/ || echo "Widget demo file not found, skipping"
          cp public/widget-integration-guide.html dist/ || echo "Integration guide file not found, skipping"

      # Create fallback/404 page
      - name: Create 404.html
        run: cp dist/index.html dist/404.html

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages üöÄ
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
          clean: true
